package me.saac.i.ai;

import java.util.HashMap;

public class BasicOpponentModel implements OpponentModel {

	// TODO: discover why EV for check and raise always 0 on first hand
	
    // Hash Map which maps (number of raises) to an int array
    // representing the histogram for that number of raises

	private HashMap<Integer, int[]> historyToHandStrength = new HashMap<Integer, int[]>();
	
	// keep track of opponent actions
	private long opponentChecks = 0;
	private long opponentRaises = 0;
	private long opponentFolds = 0;

    // takes current history and player hand strength and calculates win probability
	public double winPossibility(ActionList history, GameInfo gameInfo, int playerHandStrength) {
		
	        // find number of raise actions in history
		int numRaises = history.numberOfRaises();
		
		// find histogram and adjusted hand strength
		int[] histogram = historyToHandStrength.get(numRaises);
		int aphs = adjustedHandStrength(playerHandStrength);
		
		// if there is no observed history for this number of raises,
		// return a default probability based on adjusted hand strength
		if(histogram == null)
			return 1 - (aphs / 8);
		
		
		// calculate win% = hands player can defeat / total hands
		int handsPlayerWins = 0;
		int handsOpponentWins = 0;
		int i;
		for(i = 0; i < aphs; i++) {
			handsOpponentWins += histogram[i];
		}
		for(; i < histogram.length; i++) {
			handsPlayerWins += histogram[i];
		}
		
		return (double) handsPlayerWins / (handsPlayerWins + handsOpponentWins);
	}
	
    // Basic opponent model only updates when the hand is finished
	public void inputAction(ActionList history, GameState gameState) {

	}
	
   // when opponent acts, update the opponent model with hand data
	public void inputEndOfHand(ActionList history, GameState gameState) {
		int handStrength = gameState.knownCards.evaluateOpponentHand();
		GameInfo gameInfo = gameState.gameInfo;
		
		if(handStrength != -1) {
			int numRaises = history.numberOfRaises();
			
			// calculate adjusted hand strength
			int ahs = adjustedHandStrength(handStrength);

			// if there is no history, initialize an empty int array
			if(historyToHandStrength.get(numRaises) == null) {
				int[] histogram = new int[] {0,0,0,0,0,0,0,0,0,0};
				historyToHandStrength.put(numRaises, histogram);
			}

			// find existing histogram and increment appropriate slot
			int[] histogram = historyToHandStrength.get(numRaises);
			histogram[ahs] = histogram[ahs] + 1;
		
			System.out.print("OpponentModel["+numRaises+"] <- ");
			for(int i = 0; i < histogram.length; i++) {
				System.out.print(histogram[i] + " - ");
			}
		}
		
		ActionList opponentActions = history.opponentActions(gameInfo);
		opponentRaises += opponentActions.numberOfRaises();
		opponentChecks += opponentActions.numberOfChecks();
		opponentFolds += opponentActions.numberOfFolds();
		double[] ap = actionProbabilities(history, gameInfo);
		
		System.out.println("\nOpponent actions (r/c/f): " + opponentRaises + " / " + 
				opponentChecks + " / "  + opponentFolds);
		System.out.println("AP: " + ap[0] + " / " + ap[1] + " / " + ap[2]);
	}
	
	private int adjustedHandStrength(int rawHandStrength) {
		int ahs = rawHandStrength / 1000;
		return Math.min(ahs, 9);
	}

    // takes history and returns an array of opponent probabilities
    // for {fold, call, raise}.
	public double[] actionProbabilities(ActionList history, GameState gameState) {
		long totalActions = Math.max(1, opponentRaises + opponentChecks + opponentFolds);
		
		return new double[] {((double) opponentRaises / totalActions), 
				((double) opponentChecks / totalActions), 
				((double) opponentFolds / totalActions)};
	}


}
