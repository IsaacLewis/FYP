package me.saac.i.ai;
import java.net.*;
import java.io.*;
import java.util.ArrayList;
import java.util.regex.*;

import pokerai.game.eval.spears.Card;

import me.saac.i.ai.GameInfo.Dealer;
import me.saac.i.ai.GameState.Action;
import me.saac.i.ai.GameState.BettingRound;
import me.saac.i.ai.GameState.NodeType;

public class Client {
    static int portOffset = 7000;
    static int inputLength = 124;


    
    public static void main(String[] args) throws Exception {

	// take the player number from command line and connect to the appropriate
	// TCP port
	playerNo = Integer.parseInt(args[0].trim());
	int port = portOffset + playerNo;
	
	Socket socket = new Socket("localhost", port);
	BufferedReader in = 
	    new BufferedReader(new InputStreamReader(socket.getInputStream()));
	PrintWriter out = 
	    new PrintWriter(socket.getOutputStream(), true);
	
	out.print("My name is " + name);
	out.flush();

	char[] cbuf = new char[inputLength];
	String input;

	// loop to take input and process it
	while(true) {
		try {
			if (in.ready()) {
			        // take input
				in.read(cbuf, 0, inputLength);
				input = new String(cbuf);
				input = input.trim();
				receive(input);
				
				// if we're being prompted for an action
				// send the result of getAction()
				if(inputPrompt.matcher(input).find()) {
					out.print(getAction(input));
					out.flush();

				// if input is "SHUTDOWN", close the TCP socket and exit
				} else if (input.equals("SHUTDOWN")) {
					socket.close();
					System.exit(0);
				}
			}
		} catch(Exception e) {
		        // if there's an exception, print stack trace and exit
			System.out.println("Caught exception: ");
			e.printStackTrace();
			socket.close();
			System.exit(0);
		}
	}
    }

    // process the input, updating state as appropriate
    static void receive(String str) {
	System.out.println("Received '" + str + "'");
	
	// try to match the input against the different regexs
	Matcher betSizeMatcher = betSizeMsg.matcher(str);
	Matcher dealerMatcher = dealerMsg.matcher(str);
	Matcher bettingRoundMatcher = bettingRoundMsg.matcher(str);
	Matcher chipDistributionMatcher = chipDistributionMsg.matcher(str); 
	Matcher playerActionMatcher = playerActionMsg.matcher(str);
	Matcher playerHandMatcher = playerHandMsg.matcher(str);
	Matcher boardCardMatcher = boardCardMsg.matcher(str);
	Matcher showdownMatcher = showdownMsg.matcher(str);
	
	// update state as appropriate depending on input

	if(str.substring(0,7).equals("Hand No")) {
		resetStateVariables();
		System.out.println("Resetting vars for new hand");
		
	} else if(betSizeMatcher.find()) {
		smallBetSize = Integer.parseInt(betSizeMatcher.group(1));
		System.out.println("smallBetSize <- " + smallBetSize);
		
	} else if(dealerMatcher.find()) {
		if(dealerMatcher.group(1).matches(name)) {
			dealer = Dealer.PLAYER;
		} else {
			dealer = Dealer.OPPONENT;
		}
		System.out.println("dealer <- " + dealer);
		
	} else if(bettingRoundMatcher.find()) {
		bettingRound = BettingRound.valueOf(bettingRoundMatcher.group(1).toUpperCase());
		System.out.println("bettingRound <- " + bettingRound);
		actionHistory.add(Action.DEAL);
		
	} else if(chipDistributionMatcher.find()) {
		int player1bet = Integer.parseInt(chipDistributionMatcher.group(1));
		int potSize = Integer.parseInt(chipDistributionMatcher.group(2));
		int player2bet = Integer.parseInt(chipDistributionMatcher.group(3));
		
		// each player contributed half the pot amount, so add this to their current bet to
		// find their total contribution for this hand
		if(playerNo == 1) {
			playerBetAmount = player1bet + (int) (potSize * 0.5);
			opponentBetAmount = player2bet + (int) (potSize * 0.5);
		} else {
			playerBetAmount = player2bet + (int) (potSize * 0.5);
			opponentBetAmount = player1bet + (int) (potSize * 0.5);
		}
		System.out.println("playerBetAmount <- " + playerBetAmount);
		System.out.println("opponentBetAmount <- " + opponentBetAmount);
		
	} else if(playerActionMatcher.find()) {
		String action = playerActionMatcher.group(1);
		if(action.equals("calls") || action.equals("checks")) {
			actionHistory.add(Action.CHECK);
		} else if(action.equals("bets") || action.equals("raises")) {
			actionHistory.add(Action.RAISE);
		} else {
			actionHistory.add(Action.FOLD);
		}
	
	} else if(playerHandMatcher.find()) {
		knownCards.add(Card.parse(playerHandMatcher.group(1)));
		knownCards.add(Card.parse(playerHandMatcher.group(2)));
		System.out.println("playerHand <- " + knownCards.cards[0].name() + " " + knownCards.cards[1].name());
		
	} else if(boardCardMatcher.find()) {
		knownCards.add(Card.parse(boardCardMatcher.group(1)));
		System.out.print("knownCards <- ");
		for(int i = 0; i < knownCards.count; i++) {
			System.out.print(knownCards.cards[i].toString());
		}
		System.out.println();
		
	} else if(showdownMatcher.find()) {
		if(!showdownMatcher.group(1).equals(name)) {
			CardArray opponentCards = knownCards.subset(2, 7);
			opponentCards.add(Card.parse(showdownMatcher.group(2)));
			opponentCards.add(Card.parse(showdownMatcher.group(3)));
			
			opponentModel.input(actionHistory, opponentCards.evaluate());
		}
	}
    }

    // return the highest EV action as calculated by the AI
    static char getAction(String str) {
    	char result = 'x';

	// create a new gameState object based on state variables
    	gameInfo = new GameInfo(smallBetSize, dealer, opponentModel);
    	GameState currentState = new GameState(NodeType.PLAYER, bettingRound, playerBetAmount, 
    		opponentBetAmount, knownCards, actionHistory, gameInfo);

    	System.out.println(currentState.print());


    	if(bettingRound != BettingRound.PREFLOP) {
    		System.out.println(currentState.EV());
		// calculate ev for fold / check / raise
    		double ev_fold = -playerBetAmount;
    		double ev_check = currentState.successor(Action.CHECK).EV();
    		double ev_raise = currentState.successor(Action.RAISE).EV();
    		System.out.println("Fold EV: " + ev_fold + " Check EV: " + ev_check + " Raise EV: " + ev_raise);

		// return max EV action
    		if(ev_fold > ev_raise) { 
    			if(ev_fold > ev_check) result = 'f';
    			else result = 'c';
    		} else {
    			if(ev_raise > ev_check) result = 'r';
    			else result = 'c';
    		}
    	} else {
	    // if it's preflop, just check/call
	    // TODO: implement proper preflop strategy
    		result = 'c';
    	}	
    	return result;
    }
    
    static void resetStateVariables() {
        bettingRound = BettingRound.PREFLOP;
        actionHistory = new ArrayList<Action>();
        knownCards = new CardArray();
        playerBetAmount = 0;
        opponentBetAmount = 0;
        }
}